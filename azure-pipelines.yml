trigger:
  branches:
      include:
      - master
      - refs/tags/*
pr:
- master

pool:
  vmImage: 'windows-2019'

variables:
  projects: '**/*.csproj'
  BuildConfiguration: Release

steps:
# Install required SDKs and tools
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK'
  inputs:
    packageType: 'sdk'
    version: '2.2.203'
- task: CmdLine@2
  displayName: 'Install DNT'
  inputs:
    script: 'npm i -g dotnettools'

# Patch project versions
- task: CmdLine@2
  displayName: 'Update project version revision'
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/release'))
  inputs:
    script: 'dnt bump-versions revision "$(Build.BuildNumber)"'
- task: CmdLine@2
  displayName: 'Patch project version preview'
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/release'))
  inputs:
    script: 'dnt bump-versions preview "build.$(Build.BuildNumber)"'

# Build and test
- task: DotNetCoreCLI@2
  displayName: 'Build solution'
  inputs:
    command: 'build'
    projects: '$(projects)'
    arguments: '--configuration $(BuildConfiguration)'
    feedsToUse: 'select'
    versioningScheme: 'off'
- task: DotNetCoreCLI@2
  displayName: 'Run tests'
  inputs:
    command: 'test'
    projects: '$(projects)'
    arguments: '--configuration $(BuildConfiguration)'
    feedsToUse: 'select'
    versioningScheme: 'off'

# Pack and publish packages
- task: DotNetCoreCLI@2
  displayName: 'Create packages'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  inputs:
    command: 'pack'
    feedsToUse: 'select'
    packagesToPack: '$(projects)'
    arguments: '--configuration $(BuildConfiguration)'
    versioningScheme: 'off'
- task: PublishBuildArtifacts@1
  displayName: 'Publish artifacts'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

# Push packages
# - task: DotNetCoreCLI@2
#   displayName: 'Push packages to CI feed'
#   condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/release')))
#   inputs:
#     command: 'push'
#     feedsToUse: 'select'
#     packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
#     nuGetFeedType: 'internal'
#     publishVstsFeed: 'Namotion.Reflection-CI'
#     versioningScheme: 'off'
# - task: DotNetCoreCLI@2
#   displayName: 'Push packages to NuGet.org'
#   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'))
#   inputs:
#     command: 'push'
#     feedsToUse: 'select'
#     packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
#     nuGetFeedType: 'external'
#     publishFeedCredentials: 'NuGet.org'
#     versioningScheme: 'off'